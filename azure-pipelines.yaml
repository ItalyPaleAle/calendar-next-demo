# Build the app using Webpack and deploy to IPFS

# This pipeline needs the following variables defined in Azure Pipelines:
# - DOMAIN: name of the domain where the app is deployed to (e.g. "next.italypaleale.me")
# - AAD_APPLICATION_ID: application/client ID for the OAuth application
# - CLOUDFLARE_API_TOKEN (secret): API token for Cloudflare, authorized to modify the DNS of the specific domain
# - CLOUDFLARE_ZONE_ID (secret): Zone ID for the domain in Cloudflare

# Define repository
resources:
  - repo: self

# Trigger on changes to the master and build/* branches
trigger:
  branches:
    include:
      - 'master'
      - 'build/*'

# Variables for the entire pipeline
variables:
  # Domain to update (DNSLink)
  CLOUDFLARE_DOMAIN: '_dnslink.$(DOMAIN)'

# Stages
stages:

  # Build app stage
  - stage: build
    displayName: 'Build app'
    jobs:

      # Build app job
      - job: build
        displayName: 'Build app'

        # Run on Linux (Ubuntu 18.04)
        pool:
          vmImage: 'Ubuntu-18.04'

        # Steps
        steps:
          # Install Node.js
          - task: NodeTool@0
            inputs:
              versionSpec: '12.x'
            displayName: 'Install Node.js'

          # Download the .env file
          - script: |
              curl -L https://italypaleale.blob.core.windows.net/public/calendar-next-dotenv -o .env
              echo ".env file"
              cat .env
            displayName: 'Download .env file'

          # Build app using Webpack
          - script: |
              npm ci 
              npm run build
            displayName: 'Build app using Webpack'

          # Publish the compiled app as pipeline artifact
          - publish: '$(System.DefaultWorkingDirectory)/dist'
            displayName: 'Publish Artifact: dist'
            artifact: 'dist'

  # Stage app stage
  - stage: staging
    displayName: 'Stage app'
    jobs:

      # Stage app job
      - deployment: staging
        environment: Calendar-Next-Staging
        displayName: 'Stage app'

        # Run on Linux (Ubuntu 18.04)
        pool:
          vmImage: 'Ubuntu-18.04'
        
        # Deployment strategy is "runOnce"
        strategy:
          runOnce:
            deploy:
              # Steps
              steps:
                # Download pipeline artifact
                - download: current
                  artifact: 'dist'

                # Copy files to staging via SSH
                - task: CopyFilesOverSSH@0
                  displayName: 'Copy files to staging via SSH'
                  inputs:
                    sshEndpoint: 'IPFS'
                    sourceFolder: '$(Pipeline.Workspace)/dist'
                    targetFolder: '/data/ipfs-staging/calendar-next'
                    cleanTargetFolder: true
                    failOnEmptySource: true

                # Pin files on IPFS
                - task: SSH@0
                  name: pinfiles
                  displayName: 'Pin files on IPFS'
                  inputs:
                    sshEndpoint: 'IPFS'
                    runOptions: inline
                    inline: |
                      set -e
                      
                      # Add files to IPFS
                      IPFS_HASH=$(sudo docker exec ipfs-node ipfs add -rQ /staging/calendar-next)
                      echo "IPFS hash: ${IPFS_HASH}"

                      # Set the IPFS_HASH variable
                      echo "##vso[task.setvariable variable=IPFS_HASH]$IPFS_HASH"

                # Write IPFS hash to file
                - script: |
                    set -e
                    mkdir -p $(Pipeline.Workspace)/variables
                    echo "$IPFS_HASH" > $(Pipeline.Workspace)/variables/IPFS_HASH
                  displayName: 'Write IPFS hash to file'
                
                # Update the reply URLs for the Azure AD application
                - task: AzureCLI@2
                  displayName: 'Updated Azure AD application'
                  inputs:
                    azureSubscription: 'Azure calendar-next CI'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Template
                      # HASH1 is the current IPFS HASH, and HASH2 is the new one
                      REPLY_URL_TEMPLATE="http://localhost:3000/ http://localhost:8080/ipns/$(DOMAIN)/ http://localhost:8080/ipfs/{HASH1}/ http://localhost:8080/ipfs/{HASH2}/ https://gateway.ipfs.io/ipns/$(DOMAIN)/ https://gateway.ipfs.io/ipfs/{HASH1}/ https://gateway.ipfs.io/ipfs/{HASH2}/ https://cloudflare-ipfs.com/ipns/$(DOMAIN)/ https://cloudflare-ipfs.com/ipfs/{HASH1}/ https://cloudflare-ipfs.com/ipfs/{HASH2}/ https://gateway.pinata.cloud/ipns/$(DOMAIN)/ https://gateway.pinata.cloud/ipfs/{HASH1}/ https://gateway.pinata.cloud/ipfs/{HASH2}/ https://$(DOMAIN)/ https://ipfs/{HASH2}"
                      
                      # Get the current list of reply URLs
                      CURRENT_REPLY_URLS=$(az ad app show --id $AAD_APPLICATION_ID | jq -r '.replyUrls | join(" ")')
                      echo "Current reply URLs: ${CURRENT_REPLY_URLS}"
                      
                      # Get the current IPFS hash
                      CURRENT_IPFS_HASH='none'
                      if [[ ${CURRENT_REPLY_URLS} =~ https\:\/\/ipfs\/([A-Za-z[0-9]{46}) ]]; 
                      then 
                        CURRENT_IPFS_HASH=${BASH_REMATCH[1]}; 
                      fi
                      echo "Current IPFS hash: ${CURRENT_IPFS_HASH}"
                      
                      # Updated list of reply URLs
                      UPDATED_REPLY_URLS="${REPLY_URL_TEMPLATE//\{HASH1\}/$CURRENT_IPFS_HASH}"
                      UPDATED_REPLY_URLS="${UPDATED_REPLY_URLS//\{HASH2\}/$IPFS_HASH}"
                      echo "Update reply URLs: ${UPDATED_REPLY_URLS}"
                      
                      # Update the list of reply URLs
                      az ad app update --id $AAD_APPLICATION_ID --reply-urls $UPDATED_REPLY_URLS

                # Publish the variables artifact
                - publish: $(Pipeline.Workspace)/variables
                  artifact: variables
                  displayName: 'Publish pipeline artifacts'

  # Update production stage
  - stage: production
    displayName: 'Update production'
    jobs:

      # Stage app job
      - deployment: production
        environment: Calendar-Next-Production
        displayName: 'Update production'

        # Run on Linux (Ubuntu 18.04)
        pool:
          vmImage: 'Ubuntu-18.04'
        
        # Deployment strategy is "runOnce"
        strategy:
          runOnce:
            deploy:
              # Steps
              steps:
                # Download the variables artifact
                - download: current
                  artifact: variables
                  displayName: 'Download pipeline artifacts'

                # Update DNS record
                - script: |
                    set -e

                    IPFS_HASH=$(cat $(Pipeline.Workspace)/variables/IPFS_HASH)
                    
                    echo "Updating DNSLink to ${IPFS_HASH}"

                    [[ -z "$IPFS_HASH" ]] && { echo "Variable IPFS_HASH is empty" ; exit 1; }

                    RECORD_ID=$(curl -sS -X GET "https://api.cloudflare.com/client/v4/zones/$(CLOUDFLARE_ZONE_ID)/dns_records?type=TXT&name=$(CLOUDFLARE_DOMAIN)" \
                          -H "Content-Type:application/json" \
                          -H "Authorization:Bearer $(CLOUDFLARE_API_TOKEN)" \
                              | jq -r '.result[0].id')
                    
                    curl -sS -X PUT "https://api.cloudflare.com/client/v4/zones/$(CLOUDFLARE_ZONE_ID)/dns_records/$RECORD_ID" \
                          -H "Content-Type:application/json" \
                          -H "Authorization:Bearer $(CLOUDFLARE_API_TOKEN)" \
                          --data "{\"type\":\"TXT\",\"name\":\"$(CLOUDFLARE_DOMAIN)\",\"content\":\"dnslink=/ipfs/$IPFS_HASH\",\"ttl\":120,\"priority\":10,\"proxied\":false}"
                  displayName: 'Update DNS record'
